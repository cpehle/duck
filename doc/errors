Notes on error reporting:

There are two approaches for reporting nice errors:

1.  Detect errors at an early stage
2.  Annotate later stages so that error information can be transformed into
    the format the user expects.

(2) is by far the better approach.  First, the extra complexity will come in
handy for runtime errors.  Second, and more importantly, pushing error
reporting later will lower the overhead for writing additional passes,
optimizations, etc., since late stage IR is generally sipmler than early stage
AST or IR.

One possible way to preserve information through phases would be to add a
notion of "weak variable" in order to map intermediate expressions back to the
source.  I don't think this adds fundamental complexity to the IR.  Similarly,
instead of annotating each expression with source location info, a better
approach might be to add one new IR expression type of the form

    | Location Loc Exp

which tags an expression with a location.  This would be less verbose that
tagging each expression type with a location, and would clearly indicate which
code came directly from the source and which code was generated via
optimizations.
