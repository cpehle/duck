-- | Duck Types

-- IMPORTANT: If you modify this file, run 'make gen' to regenerate thm
-- Haskell version in Gen/Type.hs.

import var
import srcLoc

-- |The type of type functions.  TyFun and TsFun below represent an
-- union of one or more of these primitive type functions.
--
-- Since type functions can be arbitrary functions from types to types,
-- there is no algorithmic way to simplify their intersections or unions.
-- Therefore, we represent them as a union of primitive type functions
-- (either arrow types or named closures).
--
-- In particular, we can perform the simplification when unioning @(a -> b)@
-- and @(c -> d)@ if @a@ and @c@ have a representable intersection.  We could have
-- chosen to make all intersections representable by storing intersections of
-- function types as well, but for now we still stick to storing unions.
data TypeFun t of
  FunArrow Trans t t
  FunClosure Var (List t)

-- |A concrete type (the types of values are always concrete)
--
-- 
data TypeVal of
  TyCons (Box Datatype) (List TypeVal)
  TyFun (List (TypeFun TypeVal))
  TyVoid

-- |A polymorphic set of concrete types (used for function overloads).  This is the same
-- as 'TypeVal' except that it can contain type variables.
data TypePat of
  TsVar Var
  TsCons (Box Datatype) (List TypePat)
  TsFun (List (TypeFun TypePat))
  TsVoid

-- |Variance of type constructor arguments.
--
-- Each type argument to a type constructor is treated as either covariant or
-- invariant.  A covariant argument occurs as concrete data, while an invariant
-- type appears as an argument to a function (or similar).  For example, in
--
-- >   data T a b = A a b (a -> Int)
--
-- @b@ is covariant but @a@ is invariant.  In terms of subtype relations, we get
--
-- >   T Int Void <= T Int Int   --   since Void <= Int
--
-- but not
--
-- >   T Void Int <= T Int Void  -- fails, since the first argument is invariant
--
-- For more explanation of covariance and invariance, see
--     <http://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)>
data Variance of Covariant ; Invariant

-- |Possible kinds of type macro transformers.
data Trans of
  NoTrans
  Delayed -- :: Delay

-- |Datatype definition: @data TYPE VARs = { CVAR TYPEs ; ... }@
data Datatype of Data
  CVar -- ^ Name
  SrcLoc -- ^ Location
  (List Var) -- ^ Type variable arguments
  (List (Loc CVar, List TypePat)) -- ^ Constructors
  (List Variance) -- ^ Variances of 'dataTyVars'
