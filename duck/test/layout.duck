import base

data T of A T ; B

data D of { D1; D2 Int }

data E of
  E1 Int
  E2

-- test nested implicit contexts, and explicit inside implicit
f x = case x of
  A y -> case y of
    A z -> case z of
      { A _ -> 17
      ; B -> 23 }
    B -> 2
        + 3
	+ 4
  B -> 7

-- implicit contexts should be able to go arbitrarily far left inside explicit contexts
g x = case x of { A y -> case y of
	A _ -> 1
        B -> 2
 ; B -> 3 }

-- verify that f and g work as expected
test_f1 = assert \ f (A (A (A B))) == 17
test_f2 = assert \ f (A (A B)) == 23
test_f3 = assert \ f (A B) == 9
test_f4 = assert \ f B == 7
test_g1 = assert \ g (A (A B)) == 1 
test_g2 = assert \ g (A B) == 2
test_g3 = assert \ g B == 3
main = testAll
