import base
main = testAll

-- Declare various functions

level :: a -> Int
level _ = 0

level :: Type a -> Int
level _ = 1

level :: Type (Type a) -> Int
level (Type x) = 1 + level x

len :: () -> Int
len _ = 0

len :: (a,b) -> Int
len _ = 2

len :: (a,b,c) -> Int
len _ = 3

rep :: Type Int -> Int
rep Int = 7

rep :: Type (List a) -> List a
rep (List a) = [rep a, rep a, rep a]

rep :: Type (a,b) -> (a,b)
rep (a,b) = rep a, rep b

rep :: Type (Type t) -> Type t
rep (Type t) = t

-- Check whether they work

test_level0 = assert \ level 7 == 0
test_level1 = assert \ level Int == 1
test_level2 = assert \ level (Type Int) == 2
test_len_1 = assert \ len (1,2) == 2
test_len_2 = assert \ len (Int,2) == 2
test_len_3 = assert \ len (Int,Int) == 2

test_rep1 = assert \ rep Int == 7
test_rep2 = assert \ rep (List Int) == [7,7,7]

-- Can we take types of expressions?  Do they get evaluated?

_ = Type 3 :: Type Int
_ = Type (head []) :: Type Void

-- Test tuple types

test_rep3 = assert \ rep (Int, Type Int) == (7, Int)
