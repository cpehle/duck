import base

assert $ 1 == (id . flip const []) 1

assert \ True > False || not False
assert \ and [1,2,3]
assert \ or [[],[()]]

assert \ not $ maybe True bool $ map tail $ Just [()]
assert \ not $ bool $ join (Just Nothing)
-- this looks funny, but it effectively undoes Delayed:
assert \ fold (x -> y -> x || y) False (Just True)
assert \ Just (Just False) > Just Nothing

assert \ either not id (Left False)
assert \ Left (Right 2) > Left (Left 3)

assert \ tail $ head [[1,2]]
assert \ [[]] == join [[],[[]]]
assert \ [3,1] < map succ [2,1]
assert \ [1,2,3] == fold (++) [1] [[2],[],[3]]
assert \ range 1 3 == reverse [3,2,1]
assert \ 3 == length [[[[]]],[],[[]]]

assert \ (3,Just (),[]) > (3,Nothing,[0])
assert \ 3 == snd \ (curry . uncurry) (flip const) (1,2) (1,3)
