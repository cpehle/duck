-- Duck prelude

-- standard operator precedence

infixr 9  .
infixr 8  ^, ^^, **
infixl 7  *, /
infixl 6  +, -
infixr 5  :
infix  4  ==, /=, <, <=, >=, >
infixr 3  &&
infixr 2  ||
infixl 1  >>, >>=
infixr 1  =<<
infixr 0  $, $!

-- basic types

data () = ()

data [a] = [] | a : [a]

data Maybe a = Nothing | Just a

-- map

over (a -> b) -> Maybe a -> Maybe b
let map f m = case m of
    Nothing -> Nothing
  | Just x -> Just (f x)

over (a -> b) -> [a] -> [b]
let map f l = case l of
    [] -> []
  | x:l -> f x : map f l

-- fold

over (a -> b -> a) -> a -> Maybe b -> a
let fold f x l = case l of
    Nothing -> x
  | Just y -> f x y

over (a -> b -> a) -> a -> [b] -> a
let fold f x l = case l of
    [] -> x
  | y:l -> fold f (f x y) l

-- arithmetic

let sum = fold (+) 0
let product = fold (*) 1
